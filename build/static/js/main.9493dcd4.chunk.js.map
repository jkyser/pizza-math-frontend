{"version":3,"sources":["components/CalculatorKey.js","components/event_handlers/changeActiveScreenInput.js","components/CalcScreenDivInput.js","components/CalcScreenInputNormal.js","components/CalcScreenPowerInput.js","components/component_utils/submitLinearEquation.js","components/Calculator.js","components/component_utils/getInputComponents.js","components/NavElement.js","components/NavList.js","components/Navbar.js","App.js","index.js"],"names":["CalculatorKey","value","handler","includes","className","onClick","disabled","changeActiveScreenInput","e","Array","from","document","getElementsByClassName","forEach","node","classList","remove","target","add","CalcScreenDivInput","CalcScreenNormalInput","input","CalcScreenPowerInput","submitLinearEquation","eqString","getElementById","children","map","component","getAttribute","join","console","log","fetch","method","headers","body","JSON","stringify","equation","then","response","json","eq","slope","yIntercept","yInt","Number","xValues","yValues","x","y","i","push","_generateXYValues","String","payload","chartName","xAxisLabel","yAxisLabel","seriesName","yAxisValues","xAxisValues","width","height","text","setAttribute","_requestLinearEqGraph","_getLinearEqGraph","Calculator","calcKeyValues","useState","screen","setScreen","handleCalculatorInput","key","activeScreenList","length","id","postDelete","textContent","slice","click","newScreen","pop","useEffect","addEventListener","removeEventListener","getInputComponent","row","j","type","NavElement","item","href","NavList","list","Navbar","src","App","htmlFor","alt","ReactDOM","render"],"mappings":"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","file":"static/js/main.9493dcd4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CalculatorKey = ({value, handler}) => {\r\n    const buttonsToDisable = ['(', ')', '^', '/', '*', 'var', 'n!', '.', 'sqrt'];\r\n\r\n    if (buttonsToDisable.includes(value)) {\r\n        return (\r\n            <button className=\"btn btn-light calc-keys fw-bold border-2\" \r\n                    value={value}\r\n                    onClick={handler}\r\n                    disabled>\r\n                {value}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <button className=\"btn btn-light calc-keys fw-bold border-2\" \r\n                value={value}\r\n                onClick={handler}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default CalculatorKey;","/**\r\n * Adds the data-screen-active class to the element that was clicked\r\n * so that the value of that element can be changed by the user\r\n * \r\n */\r\n\r\nconst changeActiveScreenInput = (e) => {\r\n\r\n    // remove the data-screen-active from each HTML element that contains the class\r\n    // there should only be one element with the class, but we iterate through\r\n    // just in case something weird happened\r\n    Array.from(document.getElementsByClassName('active-screen-input'))\r\n         .forEach((node) => {\r\n            node.classList.remove('active-screen-input');\r\n    });\r\n\r\n    // add the data-screen-active class\r\n    e.target.classList.add('active-screen-input');\r\n}\r\n\r\nexport default changeActiveScreenInput;","import React from 'react';\r\nimport changeActiveScreenInput from './event_handlers/changeActiveScreenInput';\r\n\r\nconst CalcScreenDivInput = () => {\r\n    return (\r\n        <div className=\"d-inline-block px-1\">\r\n            <div className=\"border-bottom border-dark\" onClick={changeActiveScreenInput}>1</div>\r\n            <div className=\"\" onClick={changeActiveScreenInput}>1</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalcScreenDivInput;","import React from 'react';\r\nimport changeActiveScreenInput from './event_handlers/changeActiveScreenInput';\r\n\r\n/**\r\n * Component to style a normal text input to the calculator for displaying\r\n *  \r\n */\r\n\r\nconst CalcScreenNormalInput = ({input}) => {\r\n    return (\r\n        <div className=\"d-inline-block fs-3\" data-value={input} onClick={changeActiveScreenInput}>\r\n            {input}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalcScreenNormalInput;","import React from 'react';\r\nimport changeActiveScreenInput from './event_handlers/changeActiveScreenInput';\r\n\r\nconst CalcScreenPowerInput = ({input}) => {\r\n    return (\r\n        <div className=\"d-inline-block superscript\" data-value={input} onClick={changeActiveScreenInput}>\r\n            {input}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalcScreenPowerInput;","/**\r\n * Handles the submit for the calculator input. Grabs all values from the individual\r\n * components and compiles them into a single string to send a HTTP POST request to the \r\n * linear equation solving microservice.\r\n * \r\n */\r\nexport default function submitLinearEquation() {\r\n    // get full list of equation components\r\n    let eqComponents = Array.from(document.getElementById('screen').children);\r\n\r\n    // create the string\r\n    let eqString = eqComponents.map(component => component.getAttribute('data-value')).join('');\r\n    console.log(eqString);\r\n\r\n    // send the request to the microservice\r\n    fetch('https://salty-temple-04255.herokuapp.com/solve/linearequation', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({equation: eqString})\r\n    })\r\n    .then((response) => response.json())\r\n    .then((eq) => {\r\n        // set all the values on the page to the solved values returned by the microservice\r\n        document.getElementById('lineareq-solvedeq').value = eq.equation;\r\n        document.getElementById('lineareq-slope').value = eq.slope;\r\n        document.getElementById('lineareq-yintercept').value = eq.yIntercept;\r\n\r\n        // get the graph through another microservice HTTP call\r\n        _getLinearEqGraph(eq.slope, eq.yIntercept);\r\n    });\r\n}\r\n\r\n/**\r\n * Handles the call to the graphing microservice to create a graph and display it on the page\r\n * Frist, creates an array of coordinates to send, then sends the request\r\n */\r\nfunction _getLinearEqGraph(slope, yInt) {\r\n    slope = Number(slope);\r\n    yInt = Number(yInt);\r\n    let xValues = [];\r\n    let yValues = [];\r\n\r\n    _generateXYValues(xValues, yValues, slope, yInt);\r\n\r\n    // convert x values to a string because the microservice requires it\r\n    // will be changed in the future when microservice is changed to a\r\n    // python-based API\r\n    xValues.forEach(value => String(value));\r\n\r\n    _requestLinearEqGraph(xValues, yValues);\r\n}\r\n\r\n/**\r\n * Generates x and y values for a linear equation graph\r\n */\r\nfunction _generateXYValues(x, y, slope, yInt) {\r\n    // generate a list of x and y values\r\n    for (let i = -10; i < 11; i++) {\r\n        x.push(i);\r\n        y.push((i * slope) + yInt);\r\n    }\r\n}\r\n\r\n/**\r\n * Makes a request to the graphing microservice and sets the image to display that graph\r\n * Microservice returns a base64 encoded string that is set to the image's source\r\n * \r\n */\r\nfunction _requestLinearEqGraph(x, y) {\r\n    // available options that must be set for the microservice\r\n    let payload = {\r\n        chartName: \"Linear Equation Graph\",\r\n        xAxisLabel: \"X Axis\",\r\n        yAxisLabel: \"Y Axis\",\r\n        seriesName: \"\",\r\n        yAxisValues: y,\r\n        xAxisValues: x,\r\n        width: 600,\r\n        height: 400\r\n    };\r\n\r\n    // send request to graphing microservice\r\n    fetch('https://pacific-castle-72671.herokuapp.com/basic/linegraph', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)\r\n    })\r\n    .then((response) => response.text())\r\n    .then((response) => {\r\n        // set response base64 string as the new image source\r\n        document.getElementById('lineareq-graph').setAttribute('src', `data:image/png;base64,${response}`)\r\n    });\r\n}","import React, {useState, useEffect} from 'react';\r\nimport CalculatorKey from './CalculatorKey';\r\n\r\nimport getInputComponent from './component_utils/getInputComponents';\r\nimport submitLinearEquation from './component_utils/submitLinearEquation';\r\nimport changeActiveScreenInput from './event_handlers/changeActiveScreenInput';\r\n\r\nconst Calculator = () => {\r\n    // values for all the keys of the calculator\r\n    // separated into their respective rows\r\n    const calcKeyValuesOne = ['(', ')', '^', '/', 'x'];\r\n    const calcKeyValuesTwo = ['7', '8', '9', '*', 'y'];\r\n    const calcKeyValuesThree = ['4', '5', '6', '-', 'var'];\r\n    const calcKeyValuesFour = ['1', '2', '3', '+', 'n!'];\r\n    const calcKeyValuesFive = ['del', '0', '.', '=', 'sqrt'];\r\n    const calcKeyValues = [calcKeyValuesOne, calcKeyValuesTwo, calcKeyValuesThree, calcKeyValuesFour, calcKeyValuesFive]\r\n\r\n    // state for the calculator\r\n    const [ screen, setScreen ] = useState([]);\r\n\r\n    /**\r\n     * Handles the creating and adding a new input component to the calculator screen\r\n     * or to the individual components that have been added to the screen in response \r\n     * user keyboard input\r\n     * \r\n     */\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleCalculatorInput);\r\n\r\n        // clean up so that the component is updated correctly on every render\r\n        return () => document.removeEventListener('keydown', handleCalculatorInput);\r\n    });\r\n\r\n    /**\r\n     * Handles creating and adding a new input component to the calculator screen\r\n     * or to the individual components that have been added to the screen if they\r\n     * are actively selected (defined by having the class active-screen-input)\r\n     * \r\n     */\r\n    function handleCalculatorInput(e) {\r\n        let value;\r\n        if (e.key) {\r\n            value = e.key;\r\n        } else {\r\n            value = e.target.value;\r\n        }\r\n\r\n        // check if we are dealing with a component and not the full screen\r\n        // if we are, just append the new text (unless the command was to delete)\r\n        let activeScreenList = Array.from(document.getElementsByClassName('active-screen-input'));\r\n        if (activeScreenList.length === 1 && activeScreenList[0].id !== 'screen') {\r\n            if (value === 'del' || value === 'Delete' || value === 'Backspace') {\r\n                let postDelete = activeScreenList[0].textContent.slice(0, activeScreenList[0].textContent.length - 1);\r\n                activeScreenList[0].textContent = postDelete;\r\n            } else {\r\n                activeScreenList[0].textContent += value;\r\n            }\r\n\r\n            // if the entire textContent of the node was deleted, we can delete this element by\r\n            // updating the state\r\n            if (activeScreenList[0].textContent === \"\") {\r\n                document.getElementById('screen').click();  // make sure the screen is re-highlighted\r\n                let newScreen = [...screen];\r\n                newScreen.pop();\r\n                setScreen(newScreen);\r\n            }\r\n\r\n        } else {\r\n            // we are dealing with the full screen now\r\n            let newScreen = [...screen];\r\n\r\n            // if we are deleting the component, then we just need to pop off the end of the new screen array\r\n            // otherwise, push it on to the end of the new screen array and update state\r\n            if (value === 'del' || value === 'Delete' || value === 'Backspace') {\r\n                newScreen.pop();\r\n            } else {\r\n                newScreen.push(value);\r\n            }\r\n            setScreen(newScreen)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-md-12 col-lg-3 bg-secondary rounded shadow border-dark\">\r\n            {/*Screen portion of the calculator */}\r\n            <div className=\"h-25 w-100 mt-3 p-2 bg-white rounded border d-flex align-items-center active-screen-input\"\r\n                 id=\"screen\"\r\n                 onClick={changeActiveScreenInput}>\r\n                {screen.map((value, i) => getInputComponent(value, i))}\r\n            </div>\r\n\r\n            {/*Key portion of the calculator */}\r\n            <div className=\"h-75 d-flex flex-column justify-content-evenly\">\r\n                {calcKeyValues.map((row, i) => {\r\n                    return (\r\n                        <div key={i} className=\"d-flex justify-content-around\">\r\n                            {row.map((value, j) => <CalculatorKey key={j} value={value} handler={handleCalculatorInput} />)}\r\n                        </div>\r\n                    );\r\n                })}\r\n\r\n                <div className=\"d-grid mx-4\">\r\n                    <button className=\"btn btn-light fw-bold border-2\" type=\"button\" onClick={submitLinearEquation}>SOLVE</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport CalcScreenDivInput from '../CalcScreenDivInput';\r\nimport CalcScreenNormalInput from '../CalcScreenInputNormal';\r\nimport CalcScreenPowerInput from '../CalcScreenPowerInput';\r\n\r\n/**\r\n * Returns the correct CalcScreen component given the input with a very large\r\n * switch statement (because I felt like using a switch)\r\n * \r\n * returns null on a delete command for handling in other functions\r\n *  \r\n */\r\nexport default function getInputComponent(value, i) {\r\n    switch(value) {\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9':\r\n        case '(':\r\n        case ')':\r\n        case '+':\r\n        case '-':\r\n        case '*':\r\n        case '.':   // the decimal needs to be changed\r\n        case '=':\r\n        case 'x':\r\n        case 'y':\r\n            return <CalcScreenNormalInput key={i} input={value} />;\r\n        case '/':\r\n            return <CalcScreenDivInput key={i} input={value} />;\r\n        case '^':\r\n            return <CalcScreenPowerInput key={i} input={value} />;\r\n        default:\r\n            return;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst NavElement = ({item}) => {\r\n    return (\r\n        <li className=\"nav-item\">\r\n            <a className=\"nav-link fw-bold\" href=\"#\">{item}</a>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default NavElement;","import React from 'react';\r\nimport NavElement from './NavElement';\r\n\r\nconst NavList = ({list}) => {\r\n    return (\r\n        <ul className=\"navbar-nav\">\r\n            {list.map(item => <NavElement item={item} />)}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default NavList;","import React from 'react';\r\nimport NavList from './NavList';\r\n\r\nconst Navbar = () => {\r\n    const navListItems = ['Linear Equation', 'Solve for x', 'Quadratic Equation', 'Other'];\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-md shadow-sm\">\r\n            <div className=\"container-fluid\">\r\n                <a href=\"#\" className=\"navbar-brand\">\r\n                    <img src=\"./images/logo.svg\" width=\"60\" height=\"60\" className=\"d-inline-block align-text-bottom\" />\r\n                    <span className=\"fs-1 text-light\">Pizza Math</span>\r\n                </a>\r\n                <div>\r\n                    <NavList list={navListItems} />\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from 'react';\nimport Calculator from './components/Calculator';\nimport Navbar from './components/Navbar';\n\nconst App = () => {\n  const [imgSrc, setNewImgSrc] = useState('');  // for displaying the image from matplotlib\n\n  return (\n    <>\n      <Navbar />\n      \n      <main className=\"container-fluid p-5\">\n        <div className=\"row\">\n          {/*Left side of the page containing the options for equation input*/}\n          <Calculator />\n\n          {/*Right side of the page containing the answers to everything and the graph of the equation*/}\n          <div className=\"d-flex justify-content-end flex-column col-md-12 col-lg-8 ms-auto\">\n            <div>\n              <span className=\"d-inline-block w-25 ms-5 me-5\">\n                <label htmlFor=\"lineareq-solvedeq\" className=\"from-label\">Solved Linear Equation</label>\n                <input type=\"text\" className=\"form-control\" id=\"lineareq-solvedeq\" disabled />\n              </span>\n              <span className=\"d-inline-block w-25 me-5\">\n                <label htmlFor=\"lineareq-slope\" className=\"from-label\">Slope</label>\n                <input type=\"text\" className=\"form-control\" id=\"lineareq-slope\" disabled />\n              </span>\n              <span className=\"d-inline-block w-25 me-5\">\n                <label htmlFor=\"lineareq-yintercept\" className=\"from-label\">Y-intercept</label>\n                <input type=\"text\" className=\"form-control\" id=\"lineareq-yintercept\" disabled />\n              </span>\n            </div>\n            <img id=\"lineareq-graph\" src=\"./images/empty-graph.svg\" alt=\"graph will appear here\" className=\"img-thumbnail mt-2\" />\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}